
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AnnonceurScalarFieldEnum = makeEnum({
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  mail: 'mail',
  tel: 'tel',
  idCreatedpar: 'idCreatedpar'
});

exports.Prisma.CategorieScalarFieldEnum = makeEnum({
  id: 'id',
  categorie: 'categorie'
});

exports.Prisma.CategoryrecetteScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description'
});

exports.Prisma.CategorysensorsScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor'
});

exports.Prisma.CommandeScalarFieldEnum = makeEnum({
  id: 'id',
  idRecette: 'idRecette',
  idIngredient: 'idIngredient',
  quantity: 'quantity'
});

exports.Prisma.DistributeurScalarFieldEnum = makeEnum({
  id: 'id',
  identifiant: 'identifiant',
  capaciteGoblet: 'capaciteGoblet',
  capaciteSucre: 'capaciteSucre',
  capaciteSpoon: 'capaciteSpoon'
});

exports.Prisma.EntrepiseScalarFieldEnum = makeEnum({
  id: 'id',
  nom: 'nom',
  adresse: 'adresse',
  mail: 'mail',
  tel: 'tel',
  link: 'link'
});

exports.Prisma.FactureScalarFieldEnum = makeEnum({
  id: 'id',
  idDistr: 'idDistr',
  idComm: 'idComm',
  idInfoPaiment: 'idInfoPaiment'
});

exports.Prisma.InfopaimentScalarFieldEnum = makeEnum({
  id: 'id',
  mail: 'mail',
  cartePaiment: 'cartePaiment',
  ccv: 'ccv'
});

exports.Prisma.IngredientScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  description: 'description',
  prixUnit: 'prixUnit'
});

exports.Prisma.PackScalarFieldEnum = makeEnum({
  idDistr: 'idDistr',
  idEntre: 'idEntre',
  codeverou: 'codeverou',
  localisation: 'localisation',
  state: 'state'
});

exports.Prisma.PubliciteScalarFieldEnum = makeEnum({
  id: 'id',
  url: 'url',
  idCategorie: 'idCategorie',
  idCategRecette: 'idCategRecette',
  idAnnonceur: 'idAnnonceur'
});

exports.Prisma.RecetteScalarFieldEnum = makeEnum({
  id: 'id',
  idCategRecette: 'idCategRecette',
  name: 'name',
  description: 'description',
  price: 'price',
  imageLink: 'imageLink'
});

exports.Prisma.RecetteingrScalarFieldEnum = makeEnum({
  idRecette: 'idRecette',
  idIngredient: 'idIngredient',
  quantity: 'quantity'
});

exports.Prisma.ReclamationScalarFieldEnum = makeEnum({
  id: 'id',
  idFacture: 'idFacture',
  message: 'message',
  isDone: 'isDone'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description'
});

exports.Prisma.SensorsScalarFieldEnum = makeEnum({
  id: 'id',
  idDistr: 'idDistr',
  idSensor: 'idSensor',
  value: 'value'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TaskScalarFieldEnum = makeEnum({
  id: 'id',
  idDistr: 'idDistr',
  idUser: 'idUser',
  idEntre: 'idEntre',
  idType: 'idType',
  isDone: 'isDone',
  isOpen: 'isOpen',
  date: 'date',
  time: 'time',
  message: 'message'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TypetaskScalarFieldEnum = makeEnum({
  id: 'id',
  identifiant: 'identifiant',
  description: 'description'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  mail: 'mail',
  mdp: 'mdp',
  tel: 'tel',
  idRole: 'idRole',
  idCreatedpar: 'idCreatedpar',
  idEntreprise: 'idEntreprise',
  isActive: 'isActive'
});


exports.Prisma.ModelName = makeEnum({
  categorysensors: 'categorysensors',
  sensors: 'sensors',
  categorie: 'categorie',
  categoryrecette: 'categoryrecette',
  commande: 'commande',
  distributeur: 'distributeur',
  entrepise: 'entrepise',
  facture: 'facture',
  infopaiment: 'infopaiment',
  pack: 'pack',
  publicite: 'publicite',
  recette: 'recette',
  reclamation: 'reclamation',
  task: 'task',
  users: 'users',
  annonceur: 'annonceur',
  ingredient: 'ingredient',
  recetteingr: 'recetteingr',
  role: 'role',
  typetask: 'typetask'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
